// functions/index.js
const {
  onRequest,
} = require("firebase-functions/v2/https");
const logger = require("firebase-functions/logger");
const express = require("express");
const cors = require("cors");

// Import Firebase Admin SDK for server-side operations
const admin = require("firebase-admin").default;
logger.info("DEBUG: Admin object keys (after require):", Object.keys(admin || {})); // DEBUG 1
admin.initializeApp(); // Initialize Admin SDK
logger.info("DEBUG: Admin object keys (after initializeApp):", Object.keys(admin || {})); // DEBUG 2


// Get Firestore instance
const db = admin.firestore();
logger.info("DEBUG: Firestore DB instance keys (after admin.firestore()):", Object.keys(db || {})); // DEBUG 3
const FieldValue = admin.firestore.FieldValue;
logger.info("DEBUG: FieldValue constant:", FieldValue); // DEBUG 4


const app = express();

// Enable CORS for all origins in development.
// IMPORTANT: For production, restrict this to your frontend's domain(s).
app.use(cors({
  origin: true,
}));

// Middleware to parse JSON request bodies
app.use(express.json());

// --- Authentication Middleware ---
// This function will check if the user is authenticated via their ID token
const authenticate = async (req, res, next) => {
  // Check for Authorization header
  if (!req.headers.authorization || !req.headers.authorization.startsWith("Bearer ")) {
    logger.warn("Unauthorized access: No Authorization header or malformed token.");
    return res.status(401).send("Unauthorized");
  }

  const idToken = req.headers.authorization.split("Bearer ")[1];

  try {
    // Verify the ID token using Firebase Admin SDK
    const decodedToken = await admin.auth().verifyIdToken(idToken);
    // Attach the decoded token (which contains user UID) to the request
    req.user = decodedToken;
    next(); // Proceed to the next middleware/route handler
  } catch (error) {
    logger.error("Error verifying ID token:", error);
    // Respond with 401 if token is invalid or expired
    return res.status(401).send("Unauthorized: Invalid or expired token.");
  }
};

// --- API Endpoints ---

// Root endpoint (your existing backend message)
app.get("/", (req, res) => {
  logger.info("Hello from the Trippingly backend function!", {
    structuredData: true,
  });
  res.send("Hello from the Trippingly backend function deployed to Firebase!");
});

// New endpoint to upload and store a speech
app.post("/uploadSpeech", authenticate, async (req, res) => {
  // req.user is populated by the 'authenticate' middleware
  const userId = req.user.uid;
  const {
    speechName,
    fileContent,
  } = req.body; // Expecting JSON with these fields

  logger.info(`Upload request for user: ${userId}, Speech Name: ${speechName}`, {
    structuredData: true,
  });

  // --- Server-side Validation ---
  if (!speechName || typeof speechName !== "string" || speechName.trim() === "") {
    logger.warn("Bad request: Missing or invalid speechName.");
    return res.status(400).send("Speech name is required.");
  }
  if (!fileContent || typeof fileContent !== "string" || fileContent.trim() === "") {
    logger.warn("Bad request: Missing or empty fileContent for speech:", speechName);
    return res.status(400).send("Speech content cannot be empty.");
  }

  try {
    // Store the speech in Firestore
    // Path: users/{userId}/speeches/{autoGeneratedSpeechId}
    const speechRef = await db.collection("users").doc(userId).collection("speeches").add({
      name: speechName,
      content: fileContent,
      userId: userId, // Redundant but good for quick queries
      createdAt: FieldValue.serverTimestamp(), // Use the constant you defined
      updatedAt: FieldValue.serverTimestamp(), // Use the constant you defined
    });

    logger.info(`Speech "${speechName}" uploaded by ${userId} with ID: ${speechRef.id}`, {
      structuredData: true,
    });
    res.status(200).json({
      message: `Speech "${speechName}" uploaded successfully!`,
      speechId: speechRef.id,
    });
  } catch (error) {
    logger.error("Error uploading speech to Firestore:", error);
    res.status(500).send("Failed to upload speech. Please try again.");
  }
});

// Expose the Express app as a Cloud Function
exports.api = onRequest(app);
